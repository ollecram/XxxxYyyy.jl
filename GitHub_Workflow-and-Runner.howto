
********************************************************************************
In this section `MyPackage` is a substitute for the name of a Julia package
********************************************************************************

   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
A. $$$$$$$$$$$$$$$$$   E N A B L E   G I T H U B   A C T I O N S   W O R K F L O W    $$$$$$$$$$$$$$$$$$$$$$$$$$$
   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

1. Generate Private/Public Key pair for use with GitHub Actions
	[Follow instructions at https://juliadocs.github.io/Documenter.jl/stable/man/hosting/walkthrough/index.html]

	a. $ ssh-keygen -N "" -f privatekey
			Generating public/private rsa key pair.
			Your identification has been saved in privatekey.
			Your public key has been saved in privatekey.pub.
			The key fingerprint is:
			SHA256:  ..... omissis .....
			The key's randomart image is:
			..... omissis .....

	b. $ julia
	c. julia> using Base64
	d. julia> read("privatekey", String) |> base64encode |>  println
	e. Copy the terminal output (Base64 encoded private key)

2. Add the Base64 encoded private key to a new secret named 'DOCUMENTER_KEY'
	a. Open GitHub MyPackage.jl project Settings / Secrets
	b. Type DOCUMENTER_KEY as the name of the secret
	c. Paste data copied above at step 1.e
	d. Push Add secret

3. Add the public key (of the generated pair) as a deploy key 
	a. Open GitHub MyPackage.jl project Settings / Deploy Keys
	b. Type 'Julia Documenter Deploy Key (pub of DOCUMENTER_KEY secret)' for the Title
	c. Paste in the Key field the content of file privatekey.pub created at step 1.a
	d. Leave the 'Allow write access' option UNCHECKED
	e. Push Add key


4. Define workflow for building and publishing documentation of Julia modules
	[Follow instructions at https://juliadocs.github.io/Documenter.jl/stable/man/hosting/#GitHub-Actions-1]

	a. create github actions script 'build-and-deploy-docs.yml' under MyPackage/.github/workflows
	b. Open GitHub MyPackage.jl project Settings / Actions
	c. Action permissions / Select 'Enable local and Third Party actions for this repository'

-----------------------------------------------------------------------------------------------------------------

   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
B. $$$$$$$$$$$$$$$$$$   E N A B L E   G I T H U B   S E L F - H O S T E D   R U N N E R   $$$$$$$$$$$$$$$$$$$$$$$
   $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$


   N O T E  (1) :  Running a self-hosted runner for a public repository exposes the runner host to high risks	
   N O T E  (2) :  Each runner installation must be configured with a TOKEN that ties the runner to a repository.
			The only way found insofar is to create one dedicated runner installations for each repo! 

   N O T E  (3) :  Using symlinks to bin/ and externals/ folders [to share them across per-repo installations] 
			FAILS because 3 hidden files (.credentials*, .runner) are generated by CONFIG in the
			same path where the bin/ folder physically resides and are expected to be found there.  
			So, the RUN command fails when it is co-located in a subfolder together with CONFIG files. 

1. Create a folder where to install a Self-hosted GitHub actions runner

	a. set GITHUB_RUNNER_DIR in .bashrc (~/devwork/runners/actions_runner)
	b. cd $GITHUB_RUNNER_DIR
	c. Create a subfolder MyPackage where to configure a runner specifically for the MyPackage project!
		$ mkdir MyPackage
		$ cd MyPackage 

2. Configure the self-hosted runner in the github MyPackage.jl repository
	Note that GitHub actions runners can only be defined on a per-repository base
	Github is expected to provide self-hosted runners at the account/organization basis in the future 

	a. Self-hosted runners / Push 'Add runner' and copy the CURL command to download the latest runner version, namely
		$ curl -O https://githubassets.azureedge.net/runners/2.162.0/actions-runner-linux-x64-2.162.0.tar.gz
		$ tar xzf ./actions-runner-linux-x64-2.162.0.tar.gz 
		$ ./config.sh --url https://github.com/ollecram/MyPackage.jl --token <COPY COMMAND with unique TOKEN>
				--------------------------------------------------------------------------------
				|        ____ _ _   _   _       _          _        _   _                      |
				|       / ___(_) |_| | | |_   _| |__      / \   ___| |_(_) ___  _ __  ___      |
				|      | |  _| | __| |_| | | | | '_ \    / _ \ / __| __| |/ _ \| '_ \/ __|     |
				|      | |_| | | |_|  _  | |_| | |_) |  / ___ \ (__| |_| | (_) | | | \__ \     |
				|       \____|_|\__|_| |_|\__,_|_.__/  /_/   \_\___|\__|_|\___/|_| |_|___/     |
				|                                                                              |
				|                       Self-hosted runner registration                        |
				|                                                                              |
				--------------------------------------------------------------------------------

				# Authentication


				√ Connected to GitHub

				# Runner Registration

				Enter the name of runner: [press Enter for tower] tower_MyPackage

				√ Runner successfully added
				√ Runner connection is good

				# Runner settings

				Enter name of work folder: [press Enter for _work] 

				√ Settings Saved.

		NOTE 1: We qualified the runner name, appending _MyPackage to the host name (tower)
		NOTE 2: We kept the default (_work) for the work folder

	b. To run the MyPackage runner
		$ cd $GITHUB_RUNNER_DIR/MyPackage
		$ ./run.sh	

				√ Connected to GitHub

				2019-12-18 10:11:43Z: Listening for Jobs



	c. Alternatively, one can install and operate one or more runners as a service
		WE  A V O I D  THAT for not having so many different services (one per repo) to manage

		$ sudo ./svc.sh --help

				Usage:
				./svc.sh [install, start, stop, status, uninstall]
				Commands:
				   install [user]: Install runner service as Root or specified user.
				   start: Manually start the runner service.
				   stop: Manually stop the runner service.
				   status: Display status of runner service.
				   uninstall: Uninstall runner service.	
	
		

3. Save this file in the repository root, then commit and push all changes

	a. Save this file in the repository root

	// COMMIT and PUSH all the above changes to remote

	b. $ cd $JULIA_PKG_DEVDIR/MyPackage
	c. $ git add *
	d. $ git commit -m "project structure building...5"
	e. $ git push



4. Tag the repository level at @0.0.5  "project structure building...5" using the GitHub releases UI







